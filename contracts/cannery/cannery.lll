;;;; ==========================================================================
;;;; @title Cannery
;;;; @notice Stores passed data as code in an external contract, "canned" with
;;;;         a guard, so it can't be executed directly.
;;;; @author Noel Maersk <veox>

(seq
  (include "../common.lll.inc")
  (include "./common.lll.inc")

  ;; ==========================================================================
  ;; MEMORY LAYOUT

  (def '*memloc-can-addr*    0x100) ; where the can has been stored
  (def '*memloc-can*         0x120) ; in-memory location of can with wrappers

  ;; ==========================================================================
  ;; CONSTANTS

  ;; TODO: web3-compatible function?.. but why bother?

  (def '*event-canned* ; canned(address,address)
       0x88bc4af924ebbcf92aeb0f1003d65460177fa2c66e3f6800d9b00cf9b8e5f0db)

  ;; ==========================================================================
  ;; INIT

  ; none!

  ;; ==========================================================================
  ;; CODE

  (returnlll
   (seq
     unpayable

     ;; requires deployment code to be passed as data!
     (when (= (calldatasize) 0) (revert 0 0))

     ;; start the CREATE code with a "just copy and return it"  wrapper,
     ;; followed by a "revert immediately" guard, both aligned "left"
     ;; TODO: use `|` instead of `or` when fixed emacs' lll-mode syntax HLing
     (def '*wrapper-with-revert* (or (shl *wrapper* (* 8 *revert-guard-size*))
                                     *revert-guard*))
     (mstore *memloc-can*
             (shl *wrapper-with-revert*
                  (* 8 (- 32 *wrapper-size* *revert-guard-size*))))

     ;; copy all call data to AFTER the wrapper-with-revert
     (calldatacopy (+ *memloc-can* *wrapper-size* *revert-guard-size*)
                   0x00 (calldatasize))

     ;; DEBUG: uncomment to view memory during execution
     ;; (log1 0x00 0x200 0x0101010101010101010101010101010101010101010101010101010101010101)

     ;; CREATE can, saving its address
     (mstore *memloc-can-addr*
             (create 0
                     *memloc-can*
                     (+ *wrapper-size* *revert-guard-size* (calldatasize))))

     ;; destination address must be non-zero (i.e. CREATE succeeded)
     (when (= 0 (mload *memloc-can-addr*)) (revert 0 0))

     ;; success!
     (emit1 *event-canned*                  ; event id, indexed
            (caller)                        ; who requested storing, indexed
            (mload *memloc-can-addr*) 0x20) ; where it was stored, unindexed
     (return *memloc-can-addr* 0x20))))
