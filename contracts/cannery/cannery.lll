;;;; ==========================================================================
;;;; @title Cannery
;;;; @notice Stores passed data as code in an external contract, "canned" with
;;;;         a guard, so it can't be executed directly.
;;;; @author Noel Maersk <veox>

(seq
  (include "../common.lll.inc")

  ;; ==========================================================================
  ;; MEMORY LAYOUT

  (def '*memloc-can-addr*    0x100) ; where the can has been stored
  (def '*memloc-wrapped-can* 0x120) ; in-memory location of can with wrapper

  ;; ==========================================================================
  ;; CONSTANTS

  ;; TODO: web3-compatible function?.. but why bother?

  (def '*event-canned* ; canned(address,address)
       0x88bc4af924ebbcf92aeb0f1003d65460177fa2c66e3f6800d9b00cf9b8e5f0db)

  ;; ==========================================================================
  ;; INIT

  ; none!

  ;; ==========================================================================
  ;; CODE

  (returnlll
   (seq
     unpayable

     ;; requires deployment code to be passed as data!
     (when (= (calldatasize) 0) (revert 0 0))

     ;; start the CREATE code with a "just copy and return it"  wrapper,
     ;; followed by a "revert immediately" guard, both aligned "left"
     (def '*wrapper-with-revert* (& (* 2 *wrapper*) 0xfd))
     (mstore *memloc-wrapped-can*
             (* *wrapper-with-revert*
                (exp 2 (* 8 (- 32 *wrapper-size* 1)))))

     ;; copy all call data to AFTER the wrapper-plus-one-byte
     (calldatacopy (+ *memloc-wrapped-can* *wrapper-size* 1)
                   0x00 (calldatasize))

     ;; DEBUG: uncomment to view memory during execution
     (log1 0x00 0x200 0x0101010101010101010101010101010101010101010101010101010101010101)

     ;; CREATE can, saving its address
     (mstore *memloc-can-addr*
             (create 0
                     *memloc-wrapped-can*
                     (+ *wrapper-size* 1 (calldatasize))))

     ;; destination address must be non-zero (i.e. CREATE succeeded)
     (when (= 0 (mload *memloc-can-addr*)) (revert 0 0))

     ;; success!
     (emit1 *event-canned*                  ; event id, indexed
            (caller)                        ; who requested storing, indexed
            (mload *memloc-can-addr*) 0x20) ; where it was stored, unindexed
     (return *memloc-can-addr* 0x20))))
